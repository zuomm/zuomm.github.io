[{"title":"Hello World 14","date":"2019-03-01T09:37:43.491Z","path":"hello-world14/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 13","date":"2019-03-01T09:37:41.398Z","path":"hello-world13/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 12","date":"2019-03-01T09:37:39.364Z","path":"hello-world12/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 11","date":"2019-03-01T09:37:36.187Z","path":"hello-world11/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 10","date":"2019-03-01T09:36:41.691Z","path":"hello-world10/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 9","date":"2019-03-01T09:36:38.396Z","path":"hello-world9/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 8","date":"2019-03-01T09:36:36.170Z","path":"hello-world8/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 7","date":"2019-03-01T09:36:33.736Z","path":"hello-world7/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 6","date":"2019-03-01T09:36:30.929Z","path":"hello-world6/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 5","date":"2019-03-01T09:36:25.689Z","path":"hello-world5/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 4","date":"2019-03-01T09:14:27.625Z","path":"hello-world4/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"Hello World 3","date":"2019-03-01T09:10:55.596Z","path":"hello-world3/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"enjoy","slug":"enjoy","permalink":"http://zuomm.com/tags/enjoy/"}]},{"title":"JavaScript 函数式编程笔记","date":"2019-02-19T09:48:31.217Z","path":"hello-world2/","text":"函数是一等公民当我们说函数是“一等公民”的时候，我们实际上说的是它们跟其他对象都一样，你可以像对待其他数据结构一样对待它们。 纯函数相同的输入产生相同的输出，并且没有副作用，即为纯函数。例如 Array.prototype.slice 是纯函数，而 Array.prototype.splice 不是纯函数。 只要函数跟外界环境发生交互，就是有副作用。但并不是说要禁止副作用，函数式的编程哲学是假定副作用是造成不正当行为的主要原因。 纯函数的好处： 可缓存性 Cacheable 可移植性 Portable 可测试性 Testable 合理性 Reasonable (引用透明) 柯里化只传递一个参数来调用它，然后返回另一个函数处理剩下的参数，称为柯离化，也叫做局部调用。javascript:1234567const _ = require('lodash/fp')const add = _.curry((a, b) =&gt; a + b)const add2 = add(2)add2(3) // 5 组合通过组合两个或多个函数返回一个新的函数，例如:javascript:123456const g = n =&gt; n + 1;const f = n =&gt; n * 2;const fn = compomse(f, g);fn(1); // =&gt; f(g(1)) =&gt; 4 在 compomse 中，g 将先于 f 执行，因此创建了一个从右到左的数据流。 结合律：compomse(f, compomse(g, h)) 等同于 compomse(compomse(f, g), h) pointfree “Love means never having to say you’re sorry”pointfree 模式是指永远不需要声明数据。 以一个不恰当的代码比喻： javascrip: 123456789const hello = name =&gt; console.log(`hello $&#123;name&#125;`);// not pointfreeconst sayHello = (name) =&gt; &#123; return hello(name);&#125;// pointfreeconst sayHello = hello PS: 个人理解，pointfree 即是指函数仅只是其他函数的组合，并不需要指定外部的数据，函数中也不需要传入外部变量。但这无法绝对避免，例如获取某个时间字符串的时间戳：const timestamp = (date) =&gt; (new Date(date)).getTime()。 debug在函数的组合中需要进行 debug 的话，可以使用 trace 函数。1234const trace = curry((tag, value) =&gt; &#123; console.log(tag, value); return value;&#125;); 将 trace 函数插入到 compomse 中即可检查上一个函数返回值是否正确。 identity范畴学中独特的态射，这个函数接受随便什么东西，然后原封不动的吐出来。一个假装自己是普通数据的函数。1const identity = x =&gt; x; identity 函数可以一起使用，但是看起来好像是没有卵用： 1compomse(identity, f) == compomse(f, identity) == f 类型签名接受具体类型，返回具体类型： 12// hello::String -&gt; Stringconst hello = name =&gt; `hello $&#123;name&#125;`; 接受任意类型，并返回相同类型：12// identity::a -&gt; aconst identity = n =&gt; n 接受函数参数：12// map::(a -&gt; b) -&gt; ![pic](a) -&gt; ![pic](b)const map = curry((f, xs) =&gt; xs.map(f)); 类型约束12// sort::Ord a =&gt; ![pic](a) =&gt; ![pic](a)const sort = balabala 胖箭头的左边表明 a 一定是一个 Ord 对象，也就是说 a 必须要实现 Ord 接口（可排序）。 通过这种方式能够限制函数的作用范围，这种接口声明叫做类型约束。 functor1234567const Functor = (x) =&gt; &#123; this.__value = x;&#125;;Functor.of = x =&gt; new Functor(x);Functor.prototype.map = f =&gt; Functor.of(f(this.__value)); functor 是实现了 map 函数，并遵守某些特点规则的容器类型，具有 mappable 的特点（类似于 Promise 的 thenable）。 MaybeMaybe 是另一种 functor，实际上只是多了空值检查。 123456789const Maybe = (x) =&gt; &#123; this.__value = x;&#125;;Maybe.of = x =&gt; new Maybe(x);Maybe.prototype.isNothing = () =&gt; this.__value === null || this.__value === undefined;Maybe.prototype.map = f =&gt; this.isNothing() ? Maybe.of(null) : Maybe.of(f(this.__value)); Maybe 使得在 map 调用中产生 null 或者 undefined 时不会爆出错误，而是最后返回 Maybe.of(null)。 EitherEither 又是另外一种 functor, 不同于正常的 functor, Either 不管怎么 map 都不会改变自己的值。 1234567const Either = (x) =&gt; &#123; this.__value = x;&#125;;Either.of = x =&gt; new Either(x);Either.prototype.map = () =&gt; this; Either 用于错误处理，当出现错误时我们返回一个 Either.of(error), 它将把错误带到最后，并显示出来。实际上它就是一个错误消息的 functor, 只是指不会被改变。 IOIO 又又是另外一种 functor, 与最普通的 functor 的差别是，IO 的 __value 是一个函数（不过，我们把它当成是数据）。 1234567const IO = (f) =&gt; &#123; this.unsafaPerfromIO = f;&#125;;IO.of = x =&gt; new IO(() =&gt; x);IO.prototype.map = f =&gt; IO.of(compomse(f, this.unsafaPerfromIO)); IO 把非纯的动作捕获到包裹函数中，延迟执行非纯的动作。并且，假装 IO 的返回指不是包裹函数本身，而是包裹函数执行后的返回值。 当需要获取 IO 的值的时候，就执行 IO.unsafaPerfromIO()（此时才会执行整个过程 map by map）。 Monadpointed functor 是指实现了 of 方法的 functor monad 是可以变扁的 pointed functor monad 主要的使用场景是用来解决嵌套的 functor。 一个 functor，只要它定义了一个 join 方法和 of 方法，并遵守一些定律，那么它就是一个 monad。 12345678910const getItem = key =&gt; IO.of(() =&gt; localStorage.getItem(key));const log = x = IO.of(() =&gt; &#123; console.log(x); return x;&#125;);const printItem = compomse(join, map(log), getItem);printItem('xxx').unsafaPerfromIO(); chain 函数chain 函数是 functor map 之后 join 的抽象行为 1const chain = curry((f, m) =&gt; m.map(f).join()); PS: 其实没有啥用，只是把 compomse(join, map(log), …) 变成了 compomse(chain(log), …) Applicative Functorapplicative functor 能够以一种简明扼要的方式把一个 functor 的值应用到另外一个 functor 上。 applicative functor 是实现了 ap 方法的 pointed functor 1234// applicativeFunctor.prototype.ap = other =&gt; other.map(this.__value);// Functor.of(add(2)).ap(Functor.of(3)); Functor.of(x).map(f) 等价于 Functor.of(f).ap(Functor.of(x))。 lift以 pointfree 的方式调用 applicative functor。 1const liftA2 = curry((f, functor1, functor2) =&gt; functor1.map(f).ap(functor2)); 操作符haskell 中可以使用 &lt;$&gt; 表示 map, &lt;*&gt; 表示 ap。 12Functor.of(2).map(add).ap(Functor.of(3));// map(add, Functor.of(2)).ap(Functor.of(3)); 等同于： 1add &lt;$&gt; Functor 2 &lt;*&gt; Functor 3 定律 同一：A.of(id).ap(v) == v 同态：A.of(f).ap(A.of(x)) == A.of(f(x)) 互换：v.ap(A.of(x)) == A.of(f =&gt; f(x)).ap(x) 组合：A.of(compomse).ap(u).ap(v).ap(w) == u.ap(v.ap(w))","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://zuomm.com/tags/JavaScript/"}]},{"title":"文章标题","date":"2019-02-19T09:00:14.082Z","path":"hello-world1/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"标签1","slug":"标签1","permalink":"http://zuomm.com/tags/标签1/"},{"name":"标签2","slug":"标签2","permalink":"http://zuomm.com/tags/标签2/"},{"name":"更多标签","slug":"更多标签","permalink":"http://zuomm.com/tags/更多标签/"}]}]